{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/example/server.ts"],"names":[],"mappings":";;AAAA,gCAA0F;AAC1F,yDAAgD;AAEhD,MAAM,MAAM,GAAG,IAAI,eAAS,CAAC,EAAE,EAAC;IAC9B,GAAG,EAAE,gCAAY,CAAC,YAAY,CAAC;IAC/B,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;CAC1D,CAAC,CAAA;AACF,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;IAC1B,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;AAC7B,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAiB,EAAE,EAAE;IAC5C,OAAO,CAAC,GAAG,CAAC,qBAAqB,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;IAChD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAmB,EAAE,EAAE;QAC3C,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,QAAQ,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;IACtF,CAAC,CAAC,CAAA;IACF,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAmB,EAAE,aAAsF,EAAE,EAAE;QACnI,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,QAAQ,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;QACpF,aAAa,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACpC,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC;oBACN,QAAQ,EAAE,KAAK;oBACf,WAAW,EAAE,2BAAqB,CAAC,sBAAsB;oBACzD,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;iBACjC,CAAC,CAAA;YACJ,CAAC,EAAE,IAAI,CAAC,CAAA;QACV,CAAC,CAAC,CAAC,CAAA;IACL,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,CAAC;IACZ,IAAI,EAAE,sBAAsB;CAC7B,CAAC,CAAA","sourcesContent":["import { BtpError, BtpSocket, BtpServer, BtpMessage, BtpMessageContentType } from '../lib'\nimport { createLogger } from 'ilp-module-loader'\n\nconst server = new BtpServer({},{\n  log: createLogger('btp-server'),\n  authenticate: () => Promise.resolve({ account: 'alice' })\n})\nserver.on('listening', () => {\n  console.log('Listening...')\n})\n\nserver.on('connection', (socket: BtpSocket) => {\n  console.log(`CONNECTION: state=${socket.state}`)\n  socket.on('message', (message: BtpMessage) => {\n    console.log(`MESSAGE (protocol=${message.protocol}): ${message.payload.toString()}`)\n  })\n  socket.on('request', (message: BtpMessage, replyCallback: (reply: BtpMessage | BtpError | Promise<BtpMessage | BtpError>) => void) => {\n    console.log(`REQUEST (protocol=${message.protocol}): ${message.payload.toString()}`)\n    replyCallback(new Promise((respond) => {\n      setTimeout(() => {\n        respond({\n          protocol: 'ilp',\n          contentType: BtpMessageContentType.ApplicationOctetStream,\n          payload: Buffer.from('Goodbye!')\n        })\n      }, 1000)\n    }))\n  })\n})\n\nserver.listen({\n  path: '/tmp/btp-server.sock'\n})\n"]}