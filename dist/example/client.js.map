{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/example/client.ts"],"names":[],"mappings":";;AAAA,gCAAgE;AAEhE,CAAC,KAAK,IAAI,EAAE;IACV,MAAM,MAAM,GAAG,MAAM,sBAAgB,CAAC,gBAAgB,EAAE;QACtD,OAAO,EAAE;YACP,aAAa,EAAE,cAAc;SAC9B;KACF,CAAC,CAAA;IACF,MAAM,CAAC,OAAO,CAAC;QACb,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,2BAAqB,CAAC,sBAAsB;QACzD,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;KACrC,CAAC,CAAA;IAEF,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;QAChC,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,2BAAqB,CAAC,sBAAsB;QACzD,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;KAC/B,CAAC,CAAA;IAEF,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;AAErD,CAAC,CAAC,EAAE,CAAA","sourcesContent":["import { createConnection, BtpMessageContentType } from '../lib'\n\n(async () => {\n  const client = await createConnection('127.0.0.1:5005', {\n    headers: {\n      authorization: 'Bearer TOKEN'\n    }\n  })\n  client.message({\n    protocol: 'ilp',\n    contentType: BtpMessageContentType.ApplicationOctetStream,\n    payload: Buffer.from('Hello World!')\n  })\n\n  const resp = await client.request({\n    protocol: 'ilp',\n    contentType: BtpMessageContentType.ApplicationOctetStream,\n    payload: Buffer.from('Hello?')\n  })\n\n  console.log(`RESPONSE: ${resp.payload.toString()}`)\n\n})()\n"]}